/*
 *  Copyright 2020 Roberto Francescon
 *  This file is part of freeRaptor.
 *
 *  freeRaptor is free software: you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation, either version 3 of the License, or
 *  (at your option) any later version.
 *  freeRaptor is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with freeRaptor.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @author  Roberto Francescon
 * @brief   Definition of fields, structures and functions for the
 *          implementation of Raptor10 FEC codes
 * @version 0.0.1
 * @file    raptor10.h
 */

#ifndef RAPTOR10_H
#define RAPTOR10_H

#include <stdint.h>
#include <stdlib.h>

#include <gf2matrix.h>
#include <raptor_consts.h> // J, C1 and C2

/** Type symbols is a Raptor 10 symbol: a K bytes array*/
typedef uint8_t* Symbol;

/**
 * Struct containing all the fileds needed by the R10 code to operate
 * 1. ~F~: Transfer length of the object, in bytes
 * 2. ~Al~: symbol alignment parameter
 * 3. ~T~: symbol size, in bytes
 * 4. ~Z~: number of source blocks
 * 5. ~N~: number of sub-blocks in each source block
 * 6. ~W~: a target on the sub-block size
 * 7. ~P~: maximum packet payload size (multiple of ~Al~)
 * 8. ~Kmax~: maximum number of source symbols per source block
 * 9. ~Kmin~: minimum target on the number of symbols per source block
 * 10. ~Gmax~: maximum target number of symbols per packet
 * 11. ~K~: denotes the number of symbols in a single source block
 * 12. ~L~: denotes the number of pre-coding symbols for a single source block
 * 13. ~S~: denotes the number of LDPC symbols for a single source block
 * 14: ~H~: denotes the number of Half symbols for a single source block
 * 15. ~G~: the number of symbols within an encoding symbol group
 * 16. ~C~: denotes an array of intermediate symbols, C[0], C[1], C[2],..., C[L-1]
 * 17. ~C_~: denotes an array of source symbols, C’[0], C’[1], C’[2],..., C’[K-1]
 */
typedef struct {
  uint32_t F;
  uint32_t W;
  uint32_t P;
  uint32_t Al;
  uint32_t Kmax;
  uint32_t Kmin;
  uint32_t Gmax;
  uint32_t T;
  uint32_t Z;
  uint32_t N;
  uint32_t K;
  uint32_t L;
  uint32_t S;
  uint32_t H;
  uint32_t G;
  uint8_t *C;
  uint8_t *Cp;
} Raptor10;

/**
 * Simplified struct for starting to actually do something
 */
typedef struct {
  uint32_t K;
  uint32_t S;
  uint32_t H;
  uint32_t L;
  uint32_t N;
} R10;

/**
 * Factorial function
 * @param n number of which to make the factorial
 */
int factorial(int n);

/**
 * Determine whether the provided number is prime or not
 * @return 1 if the provided number is prime, 0 otherwise
 */
int is_prime(uint32_t n);

/**
 * Choose: binomial choosing among numbers
 * @param i first number
 * @param i second number
 */
int choose(int i, int j);

/**
 * Rand function generate pseudo-random numbers
 * The output is an integer between 0 and m-1. V0 and V1 are arrays of 4-bytes
 * values.
 */
uint32_t Rand(uint32_t X, uint32_t i, uint32_t m);

/**
 * Random degree generation
 * @param v selector ft the degree
 */
uint32_t Deg(uint32_t v);

/**
 * Funtion that implements the triple generator as specified in RFC 5053
 * @param K number of source symbols 
 * @param X encoding symbolm ID
 * @param triple return array parameter
 */
void Trip(uint32_t K, uint32_t X, uint32_t triple[3], Raptor10 obj);

/**
 * Core oncoding function as specified by RFC5053
 * @param K number of source symbols
 * @param C array of intermediate symbols
 * @param triple triple generated by function Trip()
 */
void LTEnc(uint32_t X, uint32_t K, uint32_t* C, uint32_t triple[3], uint32_t G, Raptor10 obj);

/**
 * Function that buils the LDPC matrix
 * 
 */
int build_LDPC_mat(int K, int S, gf2matrix* A);

/**
 * Function that builds the Half matrix
 */
int build_Half_mat(unsigned int K, unsigned int S, unsigned int H, gf2matrix* A);

/**
 * Function that builds the LT matrix
 */
int build_LT_mat(uint32_t K, uint32_t S, uint32_t H, Raptor10 obj, gf2matrix* A);

/**
 * Function that builds the Constraints matrix
 */
int build_constraints_mat(uint32_t K, uint32_t S, uint32_t L, Raptor10 obj);

/**
 * Function responsible for computing all the needed parameters.
 * @param raptor_obj Raptor10 object to configure
 */
void compute_params(Raptor10* obj);

/**
 * Decoding function
 */
void raptor10_decode(uint8_t *enc_s, R10 *obj);

#endif
